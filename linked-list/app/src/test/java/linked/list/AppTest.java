/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.Test;
import types.LinkedList;

import static org.junit.Assert.*;

public class AppTest {

    private LinkedList<Integer> list;

    @Test public void testLinkedListTrue(){
        list=new LinkedList<>();
        list.add(1);
        list.insert(2);
        assertEquals(true, list.includes(1));
    }

    @Test public void testLinkedListFalse(){
        list=new LinkedList<>();
        list.add(0);
        list.insert(2);
        assertEquals(false, list.includes(1));
    }

    @Test public void testLinkedListAppend(){
        list = new LinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);
        assertEquals("{1}-> {2}-> {3}-> {4}-> NULL", list.toString());
    }

    @Test public void testLinkedListToString(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.insert(3);
        list.insert(4);
        assertEquals("{1}-> {2}-> {3}-> {4}-> NULL", list.toString());
    }

    /**
     * Code Challenge: Class 06
     */

    /**
     * Can successfully add a node to the end of the linked list
     */
    @Test public void testLinkedListAddToEnd(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.append(3);
        assertEquals("{1}-> {2}-> {3}-> NULL", list.toString());
    }

    /**
     * Can successfully add multiple nodes to the end of a linked list
     */
    @Test public void testLinkedListAddMultipleToEnd(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.append(3);
        list.append(4);
        list.append(5);
        assertEquals("{1}-> {2}-> {3}-> {4}-> {5}-> NULL", list.toString());
    }

    /**
     * Can successfully insert a node before a node located i the middle of a linked list
     */
    @Test public void testLinkedListInsertBefore(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.insertBefore(2, 30);
        assertEquals("{1}-> {30}-> {2}-> {3}-> NULL", list.toString());
    }

    /**
     * Can successfully insert a node before the first node of a linked list
     */
    @Test public void testLinkedListInsertBeforeFirstNode(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.insertBefore(1, 30);
        assertEquals("{30}-> {1}-> {2}-> {3}-> NULL", list.toString());
    }

    /**
     * Can successfully insert after a node in the middle of the linked list
     */
    @Test public void testLinkedListInsertAfter(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.insertAfter(2, 30);
        assertEquals("{1}-> {2}-> {30}-> {3}-> NULL", list.toString());
    }

    /**
     * Can successfully insert a node after the last node of the linked list
     */
    @Test public void testLinkedListInsertAfterLastNode(){
        list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.insertAfter(3, 30);
        assertEquals("{1}-> {2}-> {3}-> {30}-> NULL", list.toString());
    }
}
